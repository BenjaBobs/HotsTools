{"version":3,"sources":["api/state/heroes.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["s_HeroNames","atom","key","default","s_Heroes","selector","get","a","heroNames","Promise","all","map","name","fetch","then","response","json","data","App","heroData","useRecoilValueLoadable","className","state","status","title","contents","h","style","width","height","onClick","alert","alt","src","shortName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wRAGaA,EAAcC,eAAK,CAC9BC,IAAK,cACLC,QAAS,CACP,UACA,SACA,cACA,MACA,SACA,WACA,UACA,SACA,SACA,UACA,QACA,aACA,aACA,SACA,OACA,UACA,UACA,YACA,UACA,SACA,SACA,MACA,MACA,UACA,QACA,OACA,UACA,UACA,QACA,WACA,SACA,QACA,UACA,WACA,QACA,UACA,UACA,WACA,YACA,WACA,WACA,SACA,OACA,SACA,cACA,YACA,QACA,SACA,QACA,YACA,WACA,WACA,SACA,MACA,WACA,UACA,QACA,UACA,OACA,SACA,UACA,QACA,WACA,SACA,SACA,SACA,SACA,YACA,QACA,WACA,SACA,WACA,WACA,SACA,SACA,SACA,SACA,UACA,QACA,UACA,QACA,SACA,YACA,MACA,OACA,SACA,QACA,UACA,YAISC,EAAWC,mBAAS,CAC/BH,IAAK,WACLI,IAAI,WAAD,4BAAE,iCAAAC,EAAA,6DAASD,EAAT,EAASA,IACNE,EAAYF,EAAIN,GADnB,SAGgBS,QAAQC,IACzBF,EAAUG,KAAI,SAACC,GAAD,OACZC,MAAM,0DAAD,OACuDD,EADvD,UAEHE,KAFF,uCAEO,WAAOC,GAAP,SAAAR,EAAA,sEAA2BQ,EAASC,OAApC,mFAFP,2DALD,cAGGC,EAHH,yBAWIA,GAXJ,2CAAF,mDAAC,KCpESC,MA1Bf,WACE,IAAMC,EAAWC,iCAAuBhB,GAExC,OACE,yBAAKiB,UAAU,OACb,4BAAQA,UAAU,cACI,aAAnBF,EAASG,MACR,kBAAC,IAAD,CAAQC,OAAO,OAAOC,MAAM,eAE5BL,EAASM,SAASd,KAAI,SAACe,GAAD,OACpB,yBACEC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,KAC7BC,QAAS,kBAAMC,MAAML,EAAEd,QAEvB,yBACEoB,IAAI,GACJC,IAAG,0EAAqEP,EAAEQ,UAAvE,iBCVCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,aAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0689dd31.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\nimport { Hero } from './hero-types';\n\nexport const s_HeroNames = atom({\n  key: 's_HeroNames',\n  default: [\n    'abathur',\n    'alarak',\n    'alexstrasza',\n    'ana',\n    'anduin',\n    'anubarak',\n    'artanis',\n    'arthas',\n    'auriel',\n    'azmodan',\n    'blaze',\n    'brightwing',\n    'thebutcher',\n    'cassia',\n    'chen',\n    'chogall',\n    'chromie',\n    'deathwing',\n    'deckard',\n    'dehaka',\n    'diablo',\n    'dva',\n    'etc',\n    'falstad',\n    'fenix',\n    'gall',\n    'garrosh',\n    'gazlowe',\n    'genji',\n    'greymane',\n    'guldan',\n    'hanzo',\n    'illidan',\n    'imperius',\n    'jaina',\n    'johanna',\n    'junkrat',\n    'kaelthas',\n    'kelthuzad',\n    'kerrigan',\n    'kharazim',\n    'leoric',\n    'lili',\n    'liming',\n    'lostvikings',\n    'ltmorales',\n    'lucio',\n    'lunara',\n    'maiev',\n    'malfurion',\n    'malganis',\n    'malthael',\n    'medivh',\n    'mei',\n    'mephisto',\n    'muradin',\n    'murky',\n    'nazeebo',\n    'nova',\n    'orphea',\n    'probius',\n    'qhira',\n    'ragnaros',\n    'raynor',\n    'rehgar',\n    'rexxar',\n    'samuro',\n    'sgthammer',\n    'sonya',\n    'stitches',\n    'stukov',\n    'sylvanas',\n    'tassadar',\n    'thrall',\n    'tracer',\n    'tychus',\n    'tyrael',\n    'tyrande',\n    'uther',\n    'valeera',\n    'valla',\n    'varian',\n    'whitemane',\n    'xul',\n    'yrel',\n    'zagara',\n    'zarya',\n    'zeratul',\n    'zuljin',\n  ],\n});\n\nexport const s_Heroes = selector({\n  key: 's_Heroes',\n  get: async ({ get }) => {\n    const heroNames = get(s_HeroNames);\n\n    const data = await Promise.all(\n      heroNames.map((name) =>\n        fetch(\n          `https://heroespatchnotes.github.io/heroes-talents/hero/${name}.json`\n        ).then(async (response) => (await response.json()) as Hero)\n      )\n    );\n\n    return data;\n  },\n});\n","import React from 'react';\nimport { Result } from 'antd';\nimport './App.css';\nimport { useRecoilValueLoadable } from 'recoil';\nimport { s_Heroes } from './api/state/heroes';\n\nfunction App() {\n  const heroData = useRecoilValueLoadable(s_Heroes);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {heroData.state !== 'hasValue' ? (\n          <Result status=\"info\" title=\"Loading...\" />\n        ) : (\n          heroData.contents.map((h) => (\n            <div\n              style={{ width: 128, height: 128 }}\n              onClick={() => alert(h.name)}\n            >\n              <img\n                alt=\"\"\n                src={`https://heroespatchnotes.github.io/heroes-talents/images/heroes/${h.shortName}.png`}\n              />\n            </div>\n          ))\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { RecoilRoot } from 'recoil'\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}